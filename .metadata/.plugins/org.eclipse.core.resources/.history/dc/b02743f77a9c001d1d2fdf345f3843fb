package com.java.college;

import java.util.List;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.event.ValueChangeEvent;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.criterion.Projection;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;



@ManagedBean(name="clgdao")
@SessionScoped
public class CollegeDaoImpl implements CollegeDAO {
	
	
	private String localCode;


	public String getLocalCode() {
		return localCode;
	}


	public void setLocalCode(String localCode) {
		this.localCode = localCode;
	}


	public String addSubjects(Subjects subjects){
		
		SessionFactory sf = SessionHelper.getConnection();
		Session session =sf.openSession();
		Transaction trans = session.beginTransaction();
		session.save(subjects);
		trans.commit();
		return "added succesfully";		
		
	}
	
	
	public List<String> showSubjectNames(){
		
		String instructorname=this.localCode;
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		Criteria cr = session.createCriteria(Subjects.class);
		cr.add(Restrictions.eq("instructor",instructorname));
		Projection projection = Projections.property("subject");
		cr.setProjection(projection);
		List<String> subList =cr.list();
		
		return subList;
		
		
	}
	
	
	public List<String> showInstructorNames(){
		
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		Criteria cr = session.createCriteria(Subjects.class);
		Projection projection = Projections.distinct(Projections.property("instructor"));
		cr.setProjection(projection);
		
		List<String> insList =cr.list();
		
		return insList;
		
	}
	
	
	public void eventHappened(ValueChangeEvent e){
		this.localCode = e.getNewValue().toString();
		System.out.println(this.localCode);
		
	}
	
	
	public List<Feedback> showFeedback(){
		

		String instructorname=this.localCode;
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		Criteria cr = session.createCriteria(Feedback.class);
		cr.add(Restrictions.eq("instructor",instructorname));
		Projection projection =Projections.groupProperty("fbValue");
		cr.setProjection(projection);
		return cr.list();
		
	}
	
	public String addFeedback(Feedback feedback){
		SessionFactory sf = SessionHelper.getConnection();
		Session session =sf.openSession();
		Transaction trans = session.beginTransaction();
		feedback.setFid(generate());
		session.save(feedback);
		trans.commit();
		return "added succesfully";		
	}
	
	
	public String generate(){
		
		SessionFactory sf=SessionHelper.getConnection();
		Session session =sf.openSession();
		Criteria cr=session.createCriteria(Feedback.class);
		
		List<Feedback> cList=cr.list();
		
		if(cList.size()==0){
			String strfound="f001";
			return strfound;
		}else {
			String strfound=cList.get(cList.size()-1).getFid();

			
			String sub=strfound.substring(1);
			
			int temp=Integer.parseInt(sub);
			
			temp=temp+1;
			
			strfound=String.format("C%03d", temp);
			
			return strfound;
			
		}
	}
	
	
}
